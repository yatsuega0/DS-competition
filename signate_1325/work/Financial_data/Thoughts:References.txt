
⚪︎方針
	カテゴリカル変数は基本的にはLabelEncodingとCountEncodingを行う
	LightGBMとRandomForestを使用してモデルを構築する

・貸借手の所在地系の変数
	City: Cityは汎用性が低いと考えられるためDropする

・借り手の会社に関する変数（Sector, FranchiseCode）
	Sector: 公式ページに、31~33は製造業等、同じ意味の数字がいくつかあるため、一部数字は変換を行う

・SectorとFranchiseCode: カテゴリカル変数へ変換

・今回の借り入れに関する変数（RevLineCr, LowDoc）
	公式ページには値の候補が2つ（YesとNoのYN）と記載があるが、実際の値の種類は2より多い。YN以外はNaNへ置換

日付系の変数（DisbursementDate, ApprovalDate）
	日付型へ変更 → 年を抽出（借りた月や日にはあまり意味はないと思われるため）

・金額系の変数（DisbursementGross, GrAppv, SBA_Appv）
	数値型へ変更

⚪︎特徴量エンジニアリング
・金額の割合を見てみる
	SBAが保証する金額に対して借りる金額が小さければリスクは低そう
→支払額における承認額の割合であるMonthlyRepaymentは特徴量としては有用そう
	RandomForestではinfとなり扱いにくいので特徴量の作成は省略
	この辺りの加工の仕方やエビデンスなども深掘りして調べられると良いと思った

→SBA保証承認のローン額におけるローン承認額の割合も特徴量としては有用そうである
・借り手と貸し手が同じ州か見てみる
	違う州まで借りに行ってるのは財政が厳しい可能性あり
→特徴量としてあまり重要ではなかった→時間があればその辺りも検証

・SBAの承認年と借りた年の差を見てみる
	ここの承認年が長い企業は設立年数が長く、リスクが低い?
→特徴量としては有用そうではある

・NaNの列数のカウント
	一般的にNaNが多いとデフォルトリスクが高いことが多い傾向にあるらしい

・MIS_statusとの相関を確認
	NullCountやRevLineCrのCountEncodeが働いていそう


◯全体を通してmemo
・特徴量における重要度の確認および検証も時間があれば行う
・パラメータチューニングを行うとモデルの性能が落ちた→特徴量エンジニアリングや前処理などのアプローチを重視した方が良さそうと感じた
・前処理のやり方や考え方、特徴量の生成の仕方などの学習や経験を積む必要があると感じた
	欠損値の処理やデータ型の変換などの理由やエビデンスも示せるように行うとよりデータ分析に適した形になるのではないかと感じる
・振り返りとEDAの深掘りなども今後はやっていく
	むしろそちらのほうに時間をさくほうが今後データ分析に実務として携わることを考えると重要であると思った


◯References
・「Kaggleで勝つ データ分析の技術」
	モデル作成やバリデーションのやり方、パラメータチューニング（個人的にはあまり意味がなかった）を行う上で参考になった

・たかいとの備忘録【FDUA】第二回 金融データ活用チャレンジの戦い方を考える
https://takaito0423.hatenablog.com/entry/2024/01/27/194822
	baselineとなるnotebookを共有している記事
	ルール通りに前処理、学習、予測と3つに分けてコードが書かれていてとてもわかりやすく、lightGBMやxgboostといった決定木ベースであるモデルの実装の仕方や予測の仕方などとても参考にさせていただき、とても勉強になった
